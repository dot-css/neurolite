[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "neurolite"
version = "0.1.0"
description = "Automated AI/ML library for intelligent data detection and model recommendation"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "NeuroLite Team", email = "team@neurolite.ai"}
]
maintainers = [
    {name = "NeuroLite Team", email = "team@neurolite.ai"}
]
keywords = ["machine learning", "data analysis", "automated ml", "data detection", "ai"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.8"
dependencies = [
    "pandas>=1.5.0",
    "numpy>=1.21.0",
    "scipy>=1.9.0",
    "scikit-learn>=1.2.0",
    "python-magic>=0.4.27",
    "python-dateutil>=2.8.0",
    "chardet>=5.0.0",
    "statsmodels>=0.14.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "black>=23.0.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
]
docs = [
    "sphinx>=6.0.0",
    "sphinx-rtd-theme>=1.2.0",
    "sphinx-autodoc-typehints>=1.22.0",
]
cv = [
    "opencv-python>=4.7.0",
    "Pillow>=9.0.0",
]
audio = [
    "librosa>=0.10.0",
    "soundfile>=0.12.0",
]
nlp = [
    "transformers>=4.25.0",
    "nltk>=3.8.0",
]
dl = [
    "torch>=2.0.0",
    "tensorflow>=2.12.0",
]
all = [
    "neurolite[cv,audio,nlp,dl]",
]

[project.urls]
Homepage = "https://github.com/neurolite/neurolite"
Documentation = "https://neurolite.readthedocs.io/"
Repository = "https://github.com/neurolite/neurolite.git"
"Bug Tracker" = "https://github.com/neurolite/neurolite/issues"
Changelog = "https://github.com/neurolite/neurolite/blob/main/CHANGELOG.md"

[project.scripts]
neurolite = "neurolite.cli:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["neurolite*"]
exclude = ["tests*"]

[tool.setuptools.package-data]
neurolite = ["py.typed"]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["neurolite"]

# mypy configuration
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "pandas.*",
    "numpy.*",
    "scipy.*",
    "sklearn.*",
    "statsmodels.*",
    "magic.*",
]
ignore_missing_imports = true

# pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["neurolite"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"

# flake8 configuration (in setup.cfg since flake8 doesn't support pyproject.toml yet)
# See setup.cfg for flake8 configuration